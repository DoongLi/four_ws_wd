// Generated by gencpp from file agcar_ctrl_msg/mavlink_msgid.msg
// DO NOT EDIT!


#ifndef AGCAR_CTRL_MSG_MESSAGE_MAVLINK_MSGID_H
#define AGCAR_CTRL_MSG_MESSAGE_MAVLINK_MSGID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agcar_ctrl_msg
{
template <class ContainerAllocator>
struct mavlink_msgid_
{
  typedef mavlink_msgid_<ContainerAllocator> Type;

  mavlink_msgid_()
    : msg_id(0)
    , data(0)  {
    }
  mavlink_msgid_(const ContainerAllocator& _alloc)
    : msg_id(0)
    , data(0)  {
  (void)_alloc;
    }



   typedef uint8_t _msg_id_type;
  _msg_id_type msg_id;

   typedef uint8_t _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_msgid_

typedef ::agcar_ctrl_msg::mavlink_msgid_<std::allocator<void> > mavlink_msgid;

typedef boost::shared_ptr< ::agcar_ctrl_msg::mavlink_msgid > mavlink_msgidPtr;
typedef boost::shared_ptr< ::agcar_ctrl_msg::mavlink_msgid const> mavlink_msgidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator1> & lhs, const ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator2> & rhs)
{
  return lhs.msg_id == rhs.msg_id &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator1> & lhs, const ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agcar_ctrl_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f753b51b76cd7f6a7478e5e2611153e8";
  }

  static const char* value(const ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf753b51b76cd7f6aULL;
  static const uint64_t static_value2 = 0x7478e5e2611153e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agcar_ctrl_msg/mavlink_msgid";
  }

  static const char* value(const ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 msg_id\n"
"\n"
"uint8 data\n"
;
  }

  static const char* value(const ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_id);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_msgid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agcar_ctrl_msg::mavlink_msgid_<ContainerAllocator>& v)
  {
    s << indent << "msg_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_id);
    s << indent << "data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGCAR_CTRL_MSG_MESSAGE_MAVLINK_MSGID_H
